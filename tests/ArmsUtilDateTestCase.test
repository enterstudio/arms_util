<?php

/**
 * Test harness for the ARMS array utilities
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 * arms_util.inc
 */ 

class ArmsUtilDateTestCase extends DrupalTestCase {

  function get_info() {
    return array(
      'name' => t('ARMS Date Tests'),
      'desc' => 'Test misc date functions',
      'group' => 'ARMS'
    );
  }
  
  function setUp() {
    arms_util_include_api('date');
  }
  
  function testTwoWeeks() {
    // test each day of week one
    for ($i = 15; $i <= 21; $i++) {
      // start of day
      $this->assertWeek(
        strtotime('2010-02-15 0:00:00'),
        strtotime('2010-02-21 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 00:00:00'))
        );
      // middle of day
      $this->assertWeek(
        strtotime('2010-02-15 0:00:00'),
        strtotime('2010-02-21 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 16:09:02'))
        );
      // end of day
      $this->assertWeek(
        strtotime('2010-02-15 0:00:00'),
        strtotime('2010-02-21 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 23:59:59'))
        );
    }

    // test each day of week two
    for ($i = 22; $i <= 28; $i++) {
      // start of day
      $this->assertWeek(
        strtotime('2010-02-22 0:00:00'),
        strtotime('2010-02-28 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 00:00:00'))
        );
      // middle of day
      $this->assertWeek(
        strtotime('2010-02-22 0:00:00'),
        strtotime('2010-02-28 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 16:09:02'))
        );
      // end of day
      $this->assertWeek(
        strtotime('2010-02-22 0:00:00'),
        strtotime('2010-02-28 23:59:59'),
        arms_util_date_week(strtotime('2010-02-' . $i . ' 23:59:59'))
        );
    }
  }
  
  function testYearWrap() {
   $this->assertWeek(
      strtotime('2009-12-28 0:00:00'),
      strtotime('2010-01-03 23:59:59'),
      arms_util_date_week(strtotime('2009-12-30 16:09:02'))
      );
   $this->assertWeek(
      strtotime('2009-12-28 0:00:00'),
      strtotime('2010-01-03 23:59:59'),
      arms_util_date_week(strtotime('2010-01-01 16:09:02'))
      );
  }
  
  function testArrayToEpoch() {
    $data = array();
    $data['2010-02-24'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
    );
    $data['2010-02-24 10:15'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 10,
      'i' => 15,
      'A' => 'AM',
    );
    $data['2010-02-24 22:15'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 10,
      'i' => 15,
      'A' => 'PM',
    );
    $data['2010-02-24 22:15:30'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 10,
      'i' => 15,
      's' => 30,
      'A' => 'PM',
    );
    $data['2010-02-24 10:15:30'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 10,
      'i' => 15,
      's' => 30,
    );
    $data['2010-02-24 22:15:30'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 22,
      'i' => 15,
      's' => 30,
    );
    $data['2010-02-24 0:15:30'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 12,
      'i' => 15,
      's' => 30,
      'A' => 'AM',
    );
    $data['2010-02-24 12:15:30'] = array(
      'Y' => 2010,
      'M' => 02,
      'd' => 24,
      'h' => 12,
      'i' => 15,
      's' => 30,
      'A' => 'PM',
    );

    foreach ($data as $str => $arr) {
      $str_epoch = strtotime($str);
      $arr_epoch = arms_util_date_arrayToEpoch($arr);
      $this->assertEqual($str_epoch, $arr_epoch, sprintf('Same time: [%s][%d] == [%s][%d]', 
        $str, $str_epoch, print_r($arr, TRUE), $arr_epoch
      ));
    }
  }
  
  function assertWeek($expected_start, $expected_end, $actual) {
    $this->assertTrue($expected_start == $actual['start_time'], sprintf("Start [%s == %d] should be [%s == %d]", 
      date('Y-m-d H:i:s', $actual['start_time']),
      $actual['start_time'],
      date('Y-m-d H:i:s', $expected_start),
      $expected_start));
    $this->assertTrue($expected_end == $actual['end_time'], sprintf("Start [%s == %d] should be [%s == %d]", 
      date('Y-m-d H:i:s', $actual['end_time']),
      $actual['end_time'],
      date('Y-m-d H:i:s', $expected_end),
      $expected_end));
  }
}
